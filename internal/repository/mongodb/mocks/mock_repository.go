// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/b0shka/backend/internal/domain"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// AddVerifyEmail mocks base method.
func (m *MockUsers) AddVerifyEmail(ctx context.Context, verifyEmail domain.VerifyEmail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVerifyEmail", ctx, verifyEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVerifyEmail indicates an expected call of AddVerifyEmail.
func (mr *MockUsersMockRecorder) AddVerifyEmail(ctx, verifyEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVerifyEmail", reflect.TypeOf((*MockUsers)(nil).AddVerifyEmail), ctx, verifyEmail)
}

// CreateSession mocks base method.
func (m *MockUsers) CreateSession(ctx context.Context, session domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockUsersMockRecorder) CreateSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockUsers)(nil).CreateSession), ctx, session)
}

// CreateUser mocks base method.
func (m *MockUsers) CreateUser(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsers)(nil).CreateUser), ctx, user)
}

// GetSession mocks base method.
func (m *MockUsers) GetSession(ctx context.Context, id primitive.ObjectID) (domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockUsersMockRecorder) GetSession(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockUsers)(nil).GetSession), ctx, id)
}

// GetUser mocks base method.
func (m *MockUsers) GetUser(ctx context.Context, identifier interface{}) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, identifier)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersMockRecorder) GetUser(ctx, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsers)(nil).GetUser), ctx, identifier)
}

// GetVerifyEmail mocks base method.
func (m *MockUsers) GetVerifyEmail(ctx context.Context, email, code string) (domain.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyEmail", ctx, email, code)
	ret0, _ := ret[0].(domain.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyEmail indicates an expected call of GetVerifyEmail.
func (mr *MockUsersMockRecorder) GetVerifyEmail(ctx, email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyEmail", reflect.TypeOf((*MockUsers)(nil).GetVerifyEmail), ctx, email, code)
}

// RemoveVerifyEmail mocks base method.
func (m *MockUsers) RemoveVerifyEmail(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVerifyEmail", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVerifyEmail indicates an expected call of RemoveVerifyEmail.
func (mr *MockUsersMockRecorder) RemoveVerifyEmail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVerifyEmail", reflect.TypeOf((*MockUsers)(nil).RemoveVerifyEmail), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockUsers) UpdateUser(ctx context.Context, id primitive.ObjectID, user domain.UserUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUsersMockRecorder) UpdateUser(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsers)(nil).UpdateUser), ctx, id, user)
}
